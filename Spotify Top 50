# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

# Creating the table: 
CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL 
)

# Then I inserted the Spotify Data .csv into the table.

# Next, I explored the data using the following SQL. 

# Which artists have more than 1 song in the top 50?
SELECT
  artist_name,
  COUNT(id) AS songs_in_top_50
FROM Spotifydata
GROUP BY artist_name
HAVING 
    songs_in_top_50 > 1
ORDER BY songs_in_top_50 desc

# What's the average length for songs in the top 50 in seconds?
SELECT (AVG(duration_ms) * 0.001) as avg_duration
  FROM Spotifydata;

# Find the songs with the highest acoustic rating
SELECT 
track_name,
artist_name,
acousticness

FROM Spotifydata

ORDER BY acousticness desc
LIMIT 10

# Are there any trends in danceability, energy, & tempo in the charts?
SELECT
MIN(danceability) as danceability_min,
AVG(danceability) as danceability_avg,
MAX(danceability) as danceability_max,
MIN(energy) as energy_min,
AVG(energy) as energy_avg,
MAX(energy) as energy_max,
MIN(tempo) as tempo_min,
AVG(tempo) as tempo_avg,
MAX(tempo) as tempo_max

FROM Spotifydata

